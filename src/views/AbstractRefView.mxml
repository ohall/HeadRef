<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" viewActivate="viewActivateHandler(event)" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		actionBarVisible="false" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import components.HeadRefDefaults;
			import components.SqlConnect;
			
			import model.GameModel;
			import model.HeadRefModel;
			
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.BusyIndicator;
			import spark.events.ViewNavigatorEvent;
			
			[Bindable]
			public var headRefModel:HeadRefModel;
			
			public var sqlConnect:SqlConnect = new SqlConnect();
			
			protected var busyIndicator:BusyIndicator;
			
			//we've arrived in a new view, let's check on the model
			protected function viewActivateHandler(event:ViewNavigatorEvent):void{
				if (data is HeadRefModel) {//if we're coming from another view, use data obj
					headRefModel = HeadRefModel(data);
				}else if( sqlConnect.databaseExists() ){//otherwish, create a new model
					headRefModel = sqlConnect.getSavedModelFromDatabase();
				}else{
					addDefaultValues();
				}
				if(busyIndicator){
					busyIndicator.visible = false;
				}
			}
			
			//we're leaving this view.  Take the model with us
			protected function goToView(pNextViewClass:Class):void{
				busyIndicator.visible = true;
				//close any popups we may have open.
				for (var i:int = systemManager.popUpChildren.numChildren - 1; i >= 0; i--){
					var popup:IFlexDisplayObject = IFlexDisplayObject(systemManager.popUpChildren.getChildAt(i));
					PopUpManager.removePopUp(popup);
				}
				
				//we'll save data on every view change
				sqlConnect.saveModel(headRefModel);
				if(navigator){
					navigator.pushView(pNextViewClass, headRefModel);
				}
			}
			
			private function addDefaultValues():void{
				headRefModel = new HeadRefModel();
				headRefModel.leagues = new HeadRefDefaults().defaultRules();				
				sqlConnect.saveModel(headRefModel);
			}
			
			protected function resetGameValues():void{
				headRefModel.gameModel = null;
				headRefModel.gameModel = new GameModel();
				
			}
			
			protected function deleteTeamFromDataBase(pTeamID:String):void{
				sqlConnect.deleteTeam(pTeamID);
			}
			
			protected function deleteRulesFromDataBase(pRulesID:String):void{
				sqlConnect.deleteRules(pRulesID);
			}
			
			
			protected function creationCompleteHandler(event:FlexEvent):void{
				busyIndicator  = new BusyIndicator();
				busyIndicator.verticalCenter = 0;
				busyIndicator.horizontalCenter = 0;
				busyIndicator.setStyle("symbolColor", 0xFFFFFF);
				this.addElement(busyIndicator);
				busyIndicator.visible = false;
			}
			
		]]>
	</fx:Script>
</s:View>
