<?xml version="1.0" encoding="utf-8"?>
<views:AbstractRefView xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="NewGameView" 
		xmlns:components="components.*" 
		xmlns:model="model.*" xmlns:views="views.*">
	<fx:Script>
		<![CDATA[
			import events.LongPressEvent;
			
			import model.GameModel;
			import model.LeagueRules;
			import model.TeamModel;
			
			import mx.managers.PopUpManager;
			
			import spark.events.ViewNavigatorEvent;
			
			[Bindable]
			private var selectingHomeOrAway:String = RefConstants.HOME;
			
			
			protected function startGameButtonClickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
			}				

			protected function ruleListClickHandler(event:MouseEvent):void{
				headRefModel.gameModel.leagueRules =  ruleList.selectedItem as LeagueRules;		
				goToView(GameView);			
			}
			
			protected function editSelctedClick(event:MouseEvent):void{
				headRefModel.rulesSelectedForEditing = LeagueRules(ruleList.selectedItem).leagueName;
				goToView(EditRuleSetView);				
			}
			
			override protected function viewActivateHandler(event:ViewNavigatorEvent):void{		
				super.viewActivateHandler(event);
			}
			
			protected function newRulesButtonClickHandler(event:MouseEvent):void{
				headRefModel.rulesSelectedForEditing = "";
				goToView(EditRuleSetView);
			}
		]]>
	</fx:Script>
	
	
	<s:Label horizontalCenter="0" y="5" 
			 text="Choose Rules" 
			 styleName="newGameViewLabel" />
	
	<s:SpinnerListContainer y="100"  width="100%">
		<components:HeadRefSpinnerList id="ruleList" width="100%"  
									   click="ruleListClickHandler(event)" styleName="newRulesButton"
									   dataProvider="{headRefModel.leagues}" labelField="leagueName" />                    
	</s:SpinnerListContainer>		
	<s:Button bottom="100" width="100%" 
			  label="Tap to edit selected rules" 
			  click="editSelctedClick(event)"  />
	<s:Button bottom="20" width="100%" 
			  label="Tap to add new rules" 
			  click="newRulesButtonClickHandler(event)"  />
	
</views:AbstractRefView>
