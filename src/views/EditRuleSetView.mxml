<?xml version="1.0" encoding="utf-8"?>
<views:AbstractRefView xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="EditRuleSetView" 
		xmlns:views="views.*" xmlns:components="components.*">

	<fx:Script>
		<![CDATA[
			import model.LeagueRules;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.ViewNavigatorEvent;
			
			[Bindable]
			private var _curRuleSet:LeagueRules = new LeagueRules();
			
			[Bindable]
			private var _buttonNumsList:ArrayCollection = new ArrayCollection([1,2,3,4,5]);
			
			[Bindable]
			private var _buttonText:String = "";
			
			private var _rulesEdited:Boolean;
			
			override protected function viewActivateHandler(event:ViewNavigatorEvent):void{
				super.viewActivateHandler(event);
				_buttonText = "";
				_rulesEdited = false;
				for each(var rules:LeagueRules in headRefModel.leagues){
					if(rules.leagueName == headRefModel.rulesSelectedForEditing){
						_curRuleSet = rules;
					}
				}
								
			}
			
			protected function saveBtnMouseDownHandler(event:MouseEvent):void{
				//if rules by this name exist, replace and bail.
				for each(var rules:LeagueRules in headRefModel.leagues){
					if(rules.leagueName == _curRuleSet.leagueName){
						rules = _curRuleSet;
						goToView(NewGameView);
						return;
					}
				}
				if(_rulesEdited){
					headRefModel.leagues.addItem(_curRuleSet);
				}
				goToView(NewGameView);
				return;
				
			}
			
			protected function foulsAllowBarClickHandler(event:MouseEvent):void{
				changeButtonText();
				_curRuleSet.foulsAllowed = event.target.data as Number;
			}
			
			protected function strikesAllowBarClickHandler(event:MouseEvent):void{
				changeButtonText();
				_curRuleSet.strikesAllowed = event.target.data as Number;
			}
			
			protected function ballsAllowBarClickHandler(event:MouseEvent):void{
				changeButtonText();
				_curRuleSet.ballsAllowed = event.target.data as Number;
			}
			
			private function rulesAdded():Boolean{
				return nameInput.text != ""; 
			}
			
			protected function inputKeyDownHandler(event:KeyboardEvent):void{
				if( HeadRefTextInput(event.currentTarget).text != "" ){
					changeButtonText();
				}
			}
			
			private function changeButtonText():void{
				_rulesEdited = true;
				_buttonText = " and Save";
			}
			
			protected function deleteMouseDownHandler(event:MouseEvent):void{
				for(var i:int=0;i<headRefModel.leagues.length;i++){     
					if(_curRuleSet.id==LeagueRules(headRefModel.leagues[i]).id){
						deleteRulesFromDataBase(_curRuleSet.id);
						headRefModel.leagues.removeItemAt(i);
					}
				}
				goToView(NewGameView);
			}
			
			private function roundToNearest(roundTo:Number, value:Number):Number{
				return Math.round(value/roundTo)*roundTo;
			}
			
			protected function timeSliderchangeHandler(event:Event):void{
				_curRuleSet.timeLimitInMilliseconds = roundToNearest(60000,_curRuleSet.timeLimitInMilliseconds );				
			}
			
		]]>
	</fx:Script>
	<!--public var leagueName		: String;-->
	<s:Label 						x="5" y="2" 	
									text="League Name:" styleName="editRulesLabel" />
	<components:HeadRefTextInput 	x="5" y="20" 	
									id="nameInput" text="@{_curRuleSet.leagueName}" 
								 	keyDown="inputKeyDownHandler(event)" />

	<!--public var leagueManagerEmail : String;-->
	<s:Label 						x="5" y="62" 	
									text="League Manager's Email:" styleName="editRulesLabel" />
	<components:HeadRefTextInput  	x="5" y="80" 	
									id="emailInput"  
								  	text="@{_curRuleSet.leagueManagerEmail}"
									keyDown="inputKeyDownHandler(event)"/>
	
	<!--public var strikesAllowed	: Number;-->
	<s:Label 						x="5" y="125" 	
									text="Strikes Allowed" styleName="editRulesLabel" />
	<components:HeadRefButtonBar 	x="5" y="140" 	
									id="strikesAllowBar" 
									dataProvider="{_buttonNumsList}" 
				 					click="strikesAllowBarClickHandler(event)" 
									selectedItem="{_curRuleSet.strikesAllowed}"  />
	
	<!--public var ballsAllowed		: Number;-->
	<s:Label 						x="5" y="170" 	
									text="Balls Allowed" styleName="editRulesLabel" />
	<components:HeadRefButtonBar 	x="5" y="185" 	
									id="ballsAllowBar" dataProvider="{_buttonNumsList}" 
				 					click="ballsAllowBarClickHandler(event)" 
									selectedItem="{_curRuleSet.ballsAllowed}"  />
	
	<!--public var foulsAllowed		: Number;-->
	<s:Label 						x="5" y="220"  	
									text="Fouls Allowed" styleName="editRulesLabel" />
	<components:HeadRefButtonBar 	x="5" y="235" 
								 	id="foulsAllowBar" dataProvider="{_buttonNumsList}"
				 			   	 	click="foulsAllowBarClickHandler(event)" 
									selectedItem="{_curRuleSet.foulsAllowed}"  />
		
	<!--public var numberOfInnings	: Number;-->
	<s:Label 						x="5" y="270" 	
									text="Number of Innings: {_curRuleSet.numberOfInnings}" 
									styleName="editRulesLabel" />
	<s:HSlider 						x="5" y="280" 	
									id="inningsSlider" minimum="1" maximum="16" 
									value="@{_curRuleSet.numberOfInnings}" /> 

	<!--public var timeLimitInMilliseconds	: Number;-->
	<s:Label 						x="5" y="310" 	
									text="Time Limit: {Math.floor(_curRuleSet.timeLimitInMilliseconds / 60000)} Minutes" 
									styleName="editRulesLabel" />
	<s:HSlider 						x="5" y="320" showDataTip="true" change="timeSliderchangeHandler(event)" 	
									id="timeSlider" minimum="1" maximum="7200000" 
									value="@{_curRuleSet.timeLimitInMilliseconds}" /> 
	
	<!--public var allowsTies		: Boolean;-->
	<s:Label 						x="5" y="350" 		
									text="Allow Ties" styleName="editRulesLabel" />
	<s:ToggleSwitch 				right="5" y="350" 	
									id="tiesToggle" selected="@{_curRuleSet.allowsTies}"/> 

	<!--public var foulsAreStrikes	: Boolean;-->
	<s:Label 						x="5" y="380" 		
									text="Fouls are Strikes" styleName="editRulesLabel" />
	<s:ToggleSwitch 				right="5" y="380" 	
									id="foulsToggle" selected="@{_curRuleSet.foulsAreStrikes}"/>

	<!--public var walkOnBalls		: Boolean;-->
	<s:Label						x="5" y="410" 		
									text="Walk on Balls" styleName="editRulesLabel" />
	<s:ToggleSwitch 				right="5" y="410"	
									id="ballsToggle" selected="@{_curRuleSet.walkOnBalls}"/>
	
	<s:HGroup  bottom="0" width="100%" horizontalAlign="center" >
		<s:Button label="Exit{_buttonText}" 
				  width="100%" mouseDown="saveBtnMouseDownHandler(event)" />
		<s:Button width="100%" label="Delete" mouseDown="deleteMouseDownHandler(event)" />
	</s:HGroup>
	
</views:AbstractRefView>
