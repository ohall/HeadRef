<?xml version="1.0" encoding="utf-8"?>
<views:AbstractRefView xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="GameView"  
		xmlns:components="components.*" xmlns:views="views.*">
	<views:layout>
		<s:VerticalLayout paddingTop="10" paddingBottom="5" paddingLeft="5" paddingRight="5" gap="80" 
						  horizontalAlign="center" verticalAlign="top"/>
	</views:layout>
	<fx:Script>
		<![CDATA[
			import components.CheckGameEndPopUp;
			
			import events.AddTeamEvent;
			import events.EndGamePopUpButtonEvent;
			import events.GameCompleteEvent;
			
			import mx.managers.PopUpManager;
			
			import spark.events.ViewNavigatorEvent;

			[Bindable]
			protected var halfInning:String = RefConstants.INNING_TOP;	
			
			// stack and vals for undo button
			private var _undoStack:Array = new Array();
			private static const BALL		: String = "ball";
			private static const STRIKE		: String = "strike";
			private static const FOUL		: String = "foul";
			private static const OUT		: String = "out";
			private static const HOMESCORE	: String = "home";
			private static const AWAYSCORE	: String = "away";
			
			private var _endPop:CheckGameEndPopUp;
			
			override protected function viewActivateHandler(event:ViewNavigatorEvent):void{
				super.viewActivateHandler(event);
				headRefModel.gameModel.dispatcher.addEventListener( GameCompleteEvent.GAME_COMPLETE, handleGameComplete );
			}
			
			protected function undoButtonClickHandler(event:MouseEvent):void{
				switch(_undoStack.pop()){
					case BALL: 	headRefModel.gameModel.balls--; 	break;
					case STRIKE:headRefModel.gameModel.strikes--; 	break;
					case FOUL: 	headRefModel.gameModel.fouls--;		break;
					case OUT: 	headRefModel.gameModel.outs--;		break;
					case HOMESCORE:headRefModel.gameModel.homeTeamScore--;break;
					case AWAYSCORE:headRefModel.gameModel.awayTeamScore--;break;
					default:break;
				}
			}

			protected function foulBtnClickHandler(event:MouseEvent):void{
				headRefModel.gameModel.fouls++;
				_undoStack.push(FOUL);
			}
			
			protected function strikeBtnClickHandler(event:MouseEvent):void{
				headRefModel.gameModel.strikes++;
				_undoStack.push(STRIKE);
			}
			
			protected function ballBtnClickHandler(event:MouseEvent):void{				
				headRefModel.gameModel.balls++;
				_undoStack.push(BALL);
			}
			
			protected function awayBtnClickHandler():void{
				headRefModel.gameModel.awayTeamScore++;
				_undoStack.push(AWAYSCORE);
			}
			
			protected function homeBtnClickHandler():void{				
				headRefModel.gameModel.homeTeamScore++;
				_undoStack.push(HOMESCORE);
			}
			
			protected function handleGameComplete(event:GameCompleteEvent):void{
				_endPop = new CheckGameEndPopUp();
				_endPop.setStyle("modalTransparency", .75);
				_endPop.setStyle("modalTransparencyBlur", .75);
				_endPop.addEventListener(EndGamePopUpButtonEvent.END_CLICK,goToEndView);
				_endPop.addEventListener(EndGamePopUpButtonEvent.CONTINUE_CLICK,continueGame);
				PopUpManager.addPopUp(_endPop,this,true);
				PopUpManager.centerPopUp(_endPop);
			}
			
			protected function continueGame(evt:EndGamePopUpButtonEvent):void{
				PopUpManager.removePopUp(CheckGameEndPopUp(evt.target));				
				_endPop=null;
			}
			
			protected function goToEndView(evt:EndGamePopUpButtonEvent):void{
				PopUpManager.removePopUp(CheckGameEndPopUp(evt.target));
				_endPop=null;
				goToView(EndView);
			}
			
			protected function safeBtnClickHandler(event:MouseEvent):void{
				headRefModel.gameModel.kickerSafe();
			}
			
			protected function outBtnClickHandler(event:MouseEvent):void{
				headRefModel.gameModel.kickerOut();
				halfInning = headRefModel.gameModel.halfInning;
				_undoStack.push(OUT);
			}			
			
			protected function addTeamHandler(event:AddTeamEvent):void{
				goToView(EditTeamView);
			}
			
		]]>
	</fx:Script>
	<s:VGroup height="100%" width="100%" gap="0">
		<s:Label text="{headRefModel.gameModel.leagueRules.leagueName} Rules" styleName="ruleTypeLabel" width="100%"/>
		<s:HGroup width="100%" gap="0"  >
			<components:TeamButton 	id="homeBtn" 
								   	teamName="{headRefModel.gameModel.homeTeam}" 
								   	score="{headRefModel.gameModel.homeTeamScore}"  
									scoreClick="homeBtnClickHandler()" 
									teamColor="{headRefModel.gameModel.homeTeamColor}"
									dataProvider="{headRefModel.teams}"
									addTeam="addTeamHandler(event)"
									/>
			
			<components:TeamButton 	id="awayBtn" 
								   	teamName="{headRefModel.gameModel.awayTeam}" 
									score="{headRefModel.gameModel.awayTeamScore}" 
					  				scoreClick="awayBtnClickHandler()"
									teamColor="{headRefModel.gameModel.awayTeamColor}"
									dataProvider="{headRefModel.teams}"
									addTeam="addTeamHandler(event)"
									/>
		</s:HGroup>
		<s:HGroup width="100%" gap="0" >
			<s:Label id="outLbl" text="{headRefModel.gameModel.outs} out  " styleName="statusLabel" />
			<s:Spacer width="100%" />
			<s:Label id="inningLbl" text="{halfInning} of " styleName="statusLabel" />	
			<s:Label id="inningLbl2" text="{headRefModel.gameModel.inning}" styleName="statusLabel" />				
		</s:HGroup>
		<s:HGroup width="100%" gap="0"  >
			<components:ResultButton id="safeBtn" label="SAFE" click="safeBtnClickHandler(event)" color="{RefConstants.GREEN}" />
			<components:ResultButton id="outBtn" label="OUT" click="outBtnClickHandler(event)" color="{RefConstants.RED}" />
		</s:HGroup>
		<s:HGroup width="100%" gap="0"  >
			<components:PitchButton id="ballBtn" label="BALL" count="{headRefModel.gameModel.balls}" 
									click="ballBtnClickHandler(event)" />
			<components:PitchButton id="strikeBtn" label="STRIKE" count="{headRefModel.gameModel.strikes}" 
									click="strikeBtnClickHandler(event)" />
			<components:PitchButton id="foulBtn" label="FOUL" count="{headRefModel.gameModel.fouls}" 
									click="foulBtnClickHandler(event)" />
		</s:HGroup>
		<components:UndoButton id="undoButton" label="UNDO" 
							   click="undoButtonClickHandler(event)" bottom="10" />
	</s:VGroup>
</views:AbstractRefView>
