<?xml version="1.0" encoding="utf-8"?>
<s:Group 	xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 	xmlns:s="library://ns.adobe.com/flex/spark" 
			width="75" height="43"
		 	mouseDown="mouseDownHandler(event)">
	<fx:Metadata>
		[Event(name="gameTimeExpired", type="events.GameTimeExpiredEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[			
			import events.GameTimeExpiredEvent;
			
			private const MIN_MASK		: String = "00";
			private const SEC_MASK		: String = "00";
			private const TIMER_INTERVAL: int = 1000;

			[Bindable]
			private var _timerIsRunning	: Boolean = false;
			private var _gameTimer		: Timer;
			private var _timeLimit		: Number;			
			
			
			private static const PAUSED_LABEL	: String = "Tap to start timer";
			private static const RUNNING_LABEL	: String = "Time Remaining:";
			private static const RUNNING_LABEL2	: String = "Tap to pause";

			
			////////////////////////
			//Interface
			///////////////////////
			
			public function set timeLimit(pLimit:Number):void{
				_timeLimit = pLimit;
				timerLabel.text = getTimeString(_timeLimit,0);
			}
			
			
			///////////////////////
			//Private Methods
			//////////////////////
			
			private function init():void {
				_gameTimer = new Timer(TIMER_INTERVAL);
				_gameTimer.addEventListener(TimerEvent.TIMER, updateTimer);
			}
			
			private function updateTimer(evt:TimerEvent):void {
				var timePassed:int = 0; 
				if(_gameTimer){
					timePassed= _gameTimer.currentCount*_gameTimer.delay;
					if(timePassed >= _timeLimit){
						_gameTimer.stop();
						_gameTimer.reset();
						dispatchEvent( new GameTimeExpiredEvent() );
					}	
				}
				timerLabel.text = getTimeString(_timeLimit, timePassed );
			}
			
			private function getTimeString(pTimeLimit:Number,pTimeElapsed:Number):String{
				var d:Date = new Date( pTimeLimit - pTimeElapsed );
				var min:String = String(MIN_MASK + d.minutes).substr(-MIN_MASK.length);
				var sec:String = String(SEC_MASK + d.seconds).substr(-SEC_MASK.length);
				return String(min + ":" + sec);				
			}
			
			private function startTimer():void {
				_gameTimer.start();
			}
			
			private function stopTimer():void {
				_gameTimer.stop();
			}
			
			
			/////////////////
			//Event Handlers
			/////////////////
			protected function mouseDownHandler(event:MouseEvent):void{
				if(!_timerIsRunning){
					if(!_gameTimer){
						init();
					}
					_timerIsRunning = true;
					startTimer();
					descriptionLabel.text = RUNNING_LABEL;
				}else{
					_timerIsRunning = false;
					stopTimer();
					descriptionLabel.text = PAUSED_LABEL;					
				}
			}
			
		]]>
	</fx:Script>
	<s:Label  id="descriptionLabel" text="{PAUSED_LABEL}" styleName="timerMetaLabel"/>
	<s:Label y="10" id="timerLabel"  styleName="timerLabel" minHeight="0"/>
	<s:Label y="32" visible="{_timerIsRunning}" text="{RUNNING_LABEL2}" styleName="timerMetaLabel"/>
</s:Group>
