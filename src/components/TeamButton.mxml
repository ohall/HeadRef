<?xml version="1.0" encoding="utf-8"?>
<s:Button xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  height="150" width="50%" 
		  skinClass="skinClasses.TeamButtonSkin"			   
		  mouseDown="mouseDownHandler(event)"
		  mouseUp="mouseUpHandler(event)" 
		  xmlns:components="components.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="addTeam", type="events.AddTeamEvent")] 
		[Event(name="editTeam", type="events.EditTeamEvent")] 
		[Event(name="longPress", type="events.LongPressEvent")] 
		[Event(name="scoreClick", type="events.ScoreClickEvent")]
		[Event(name="teamSelected", type="events.TeamSelectedEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import events.AddTeamEvent;
			import events.EditTeamEvent;
			import events.LongPressEvent;
			import events.ScoreClickEvent;
			import events.TeamSelectedEvent;
			
			import mx.collections.IList;			
			
			private var _longPressTimer:Timer;
			private var _isLongPressed:Boolean = false;
			
			[Bindable]
			public var teamColor:uint = 0xFFFFFF;//default to white			
			[Bindable]
			public var teamName:String = "";
			[Bindable]
			public var score:int = 0;
			[Bindable]
			public var homeOrAway:String = "";
			
			
			[Bindable]
			public var dataProvider:IList;		
			
			public static const HOME:String = 'home';
			public static const AWAY:String = 'away';
			
			
			protected function mouseDownHandler(event:MouseEvent):void{
				_longPressTimer = new Timer(RefConstants.LONGPRESSDELAY,1);
				_longPressTimer.addEventListener(TimerEvent.TIMER, handleLongPressTimeComplete );
				_longPressTimer.start()
			}
			
			private function handleLongPressTimeComplete(evt:TimerEvent):void{
				dispatchEvent( new LongPressEvent() );
				stopAndDisposeTimer();
				_isLongPressed = true;
				var callout:SelectTeamCallout = new SelectTeamCallout();
				callout.teamList = dataProvider;
				callout.addEventListener(TeamSelectedEvent.TEAM_SELECTED,teamSelected );
				callout.addEventListener(AddTeamEvent.ADD_TEAM,addTeam );
				callout.addEventListener(EditTeamEvent.EDIT_TEAM,editTeam );
				callout.open(this,true);
				dispatchEvent( new MouseEvent(MouseEvent.MOUSE_UP) );
			}
			
			protected function addTeam(event:AddTeamEvent):void{
				dispatchEvent( event as AddTeamEvent );
			}
			
			protected function editTeam(event:EditTeamEvent):void{
				dispatchEvent( event as EditTeamEvent );
			}
			
			protected function teamSelected(event:TeamSelectedEvent):void{
				teamColor = event.teamSelected.teamColor;
				teamName = event.teamSelected.teamName;
				dispatchEvent(event as TeamSelectedEvent );
				
			}
			
			protected function mouseUpHandler(event:MouseEvent):void{
				stopAndDisposeTimer();
				if(!_isLongPressed){
					dispatchEvent( new ScoreClickEvent() );
				}
				_isLongPressed = false;				
			}
			
			private function stopAndDisposeTimer():void{
				if(_longPressTimer){
					_longPressTimer.stop();
					_longPressTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, handleLongPressTimeComplete );
					_longPressTimer = null;
				}
			}
			

			
		]]>
	</fx:Script>
</s:Button>
